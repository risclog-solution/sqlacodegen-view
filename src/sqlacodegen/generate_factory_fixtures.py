import re
from collections.abc import Sequence
from pathlib import Path
from typing import Any

from sqlacodegen.risclog_generators import EXCLUDED_TABLES

FACTORY_HEADER = """\
# AUTO-GENERATED BY sqlacodegen
from polyfactory.factories.sqlalchemy_factory import SQLAlchemyFactory
from polyfactory.pytest_plugin import register_fixture
{model_imports}
"""

FACTORY_TEMPLATE = """\
@register_fixture(name="{fixture_name}")
class {class_name}Factory(SQLAlchemyFactory[{class_name}]):
    __model__ = {class_name}{set_relationships}
"""

FACTORY_REGISTRY_HEADER = """
# Registry for all generated factories
FACTORY_REGISTRY = {{
{registry_entries}
}}
"""


def camel_to_snake(name: str) -> str:
    s1 = re.sub("(.)([A-Z][a-z]+)", r"\1_\2", name)
    return re.sub("([a-z0-9])([A-Z])", r"\1_\2", s1).lower()


def render_factory(model: type[Any]) -> tuple[str, str, str]:
    has_fk = bool(getattr(model.__table__, "foreign_keys", []))
    set_relationships = "\n    __set_relationships__ = True" if has_fk else ""
    class_name = model.__name__
    fixture_name = f"{camel_to_snake(class_name)}_factory"
    factory_class_name = f"{class_name}Factory"
    factory_code = FACTORY_TEMPLATE.format(
        fixture_name=fixture_name,
        class_name=class_name,
        set_relationships=set_relationships,
    )
    return factory_code, fixture_name, factory_class_name


def export_factory_fixtures(
    models_by_table: dict[str, type[Any]],
    factories_path: Path,
    dependency_order: Sequence[str],
    view_table_names: set[str],
) -> None:
    # *** Filter dependency_order anhand von EXCLUDED_TABLES ***
    filtered_order = [
        table
        for table in dependency_order
        if table not in EXCLUDED_TABLES and table not in view_table_names
    ]

    model_names = {models_by_table[table].__name__ for table in filtered_order}
    import_statement = (
        "from risclog.claimxdb.database import (\n    "
        + ",\n    ".join(sorted(model_names))
        + "\n)"
    )
    factories_lines = [FACTORY_HEADER.format(model_imports=import_statement)]
    registry_entries = []

    for table in filtered_order:
        model = models_by_table[table]
        factory_code, fixture_name, factory_class_name = render_factory(model)
        factories_lines.append(factory_code)
        registry_entries.append(f'    "{fixture_name}": {factory_class_name},')

    factories_lines.append(
        FACTORY_REGISTRY_HEADER.format(registry_entries="\n".join(registry_entries))
    )

    factories_path.write_text("\n".join(factories_lines), encoding="utf-8")
