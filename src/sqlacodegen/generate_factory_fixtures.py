from pathlib import Path
from typing import Any, Sequence
from sqlalchemy.engine import Engine
from sqlalchemy.schema import MetaData
from sqlacodegen.seed_export import get_table_dependency_order

FACTORY_HEADER = '''\
# AUTO-GENERATED BY sqlacodegen
from polyfactory.factories.sqlalchemy_factory import SQLAlchemyFactory
from polyfactory.pytest_plugin import register_fixture
{model_imports}
'''

FACTORY_TEMPLATE = '''\
@register_fixture
class {class_name}Factory(SQLAlchemyFactory):
    __model__ = {class_name}
{set_relationships}
'''

def render_factory(model: type[Any]) -> str:
    has_fk = bool(getattr(model.__table__, "foreign_keys", []))
    set_relationships = "    __set_relationships__ = True" if has_fk else ""
    return FACTORY_TEMPLATE.format(
        class_name=model.__name__,
        set_relationships=set_relationships,
    )

def export_factory_fixtures(
    models_by_table: dict[str, type[Any]],
    factories_path: Path,
    dependency_order: Sequence[str],
) -> None:
    model_names = {models_by_table[table].__name__ for table in dependency_order}
    import_statement = (
    "from risclog.claimxdb.database import (\n    "
    + ",\n    ".join(sorted(model_names))
    + "\n)"
)
    factories_lines = [FACTORY_HEADER.format(model_imports=import_statement)]

    for table in dependency_order:
        model = models_by_table[table]
        factories_lines.append(render_factory(model))

    factories_path.write_text('\n'.join(factories_lines), encoding='utf-8')

